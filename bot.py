"""
–≠—Ö–æ-–±–æ—Ç —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–π –ª–µ–∫—Å–∏–∫–∏.
–ü—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–π –ª–µ–∫—Å–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç GIF-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç.
"""

import logging
import os
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ContentType

from profanity_filter import contains_profanity, initialize_bad_words
from gif_service import get_gif_url

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv('BOT_TOKEN')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã—Ö —Å–ª–æ–≤
async def on_startup(dp):
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã—Ö —Å–ª–æ–≤...")
    await initialize_bad_words()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start –∏ /help
    """
    await message.reply("–ü—Ä–∏–≤–µ—Ç!\n–Ø –±–æ—Ç —Å —Ñ—É–Ω–∫—Ü–∏–µ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–π –ª–µ–∫—Å–∏–∫–∏.\n"
                       "–ï—Å–ª–∏ —Ç—ã –Ω–∞–ø–∏—à–µ—à—å –ø–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞, —è –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ GIF.")

@dp.message_handler(commands=['update_words'])
async def update_bad_words(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã—Ö —Å–ª–æ–≤
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –∏–∑ —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if message.from_user.id == message.chat.id:  # –≠—Ç–æ –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –±–æ—Ç–æ–º
        await message.reply("–û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã—Ö —Å–ª–æ–≤ –∏–∑ –í–∏–∫–∏—Å–ª–æ–≤–∞—Ä—è...")
        await initialize_bad_words()
        await message.reply("–°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    else:
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")

@dp.message_handler(commands=['force_update'])
async def force_update_words(message: types.Message):
    """
    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –∫–µ—à–∞
    """
    if message.from_user.id == message.chat.id:  # –¢–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ
        from profanity_filter import CACHE_FILE
        import os

        await message.reply("–ù–∞—á–∏–Ω–∞—é –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è...")

        # –£–¥–∞–ª—è–µ–º –∫–µ—à-—Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if os.path.exists(CACHE_FILE):
            try:
                os.remove(CACHE_FILE)
                await message.reply(f"–ö–µ—à-—Ñ–∞–π–ª {CACHE_FILE} —É–¥–∞–ª–µ–Ω.")
            except Exception as e:
                await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–µ—à-—Ñ–∞–π–ª–∞: {e}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        await initialize_bad_words()

        from profanity_filter import BAD_WORDS
        count = len(BAD_WORDS)
        await message.reply(f"–°–ª–æ–≤–∞—Ä—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω! –ó–∞–≥—Ä—É–∂–µ–Ω–æ {count} —Å–ª–æ–≤.")
    else:
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")

@dp.message_handler(commands=['debug'])
async def debug_info(message: types.Message):
    """
    –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    """
    if message.from_user.id == message.chat.id:  # –¢–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ
        from profanity_filter import BAD_WORDS
        count = len(BAD_WORDS)
        sample = list(BAD_WORDS)[:10] if count > 10 else list(BAD_WORDS)

        debug_text = f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ: {count}\n" \
                    f"–ü—Ä–∏–º–µ—Ä—ã —Å–ª–æ–≤: {', '.join(sample)}"

        await message.reply(debug_text)

@dp.message_handler(content_types=ContentType.TEXT)
async def echo_message(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    –†–µ–∞–≥–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–π –ª–µ–∫—Å–∏–∫–æ–π
    """
    text = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–π –ª–µ–∫—Å–∏–∫–∏
    logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {text}")
    if contains_profanity(text):
        logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: {text}")

        # –ü–æ–ª—É—á–∞–µ–º URL GIF –∏–∑ API
        gif_url = await get_gif_url()

        if gif_url:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GIF –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–π –ª–µ–∫—Å–∏–∫–æ–π
            await message.reply_animation(
                animation=gif_url,
                caption="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É—é –ª–µ–∫—Å–∏–∫—É! üôè"
            )
        else:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å GIF, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É—é –ª–µ–∫—Å–∏–∫—É! üôè")
    else:
        logger.debug("–ù–µ—Ü–µ–Ω–∑—É—Ä–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")

@dp.message_handler(commands=['test'])
async def test_filter(message: types.Message):
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–ª–æ–≤–∞—Ö
    """
    if not message.get_args():
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /test [—Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏]")
        return

    test_text = message.get_args()
    result = contains_profanity(test_text)

    if result:
        await message.reply(f"‚úÖ –¢–µ–∫—Å—Ç ¬´{test_text}¬ª —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É—é –ª–µ–∫—Å–∏–∫—É")
    else:
        await message.reply(f"‚ùå –¢–µ–∫—Å—Ç ¬´{test_text}¬ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É—é –ª–µ–∫—Å–∏–∫—É")

@dp.message_handler(commands=['test_yo'])
async def test_yo_variations(message: types.Message):
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –Ω–∞ —Å–ª–æ–≤–∞ —Å –±—É–∫–≤–∞–º–∏ –µ/—ë
    """
    if not message.get_args():
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /test_yo [—Å–ª–æ–≤–æ —Å –±—É–∫–≤–æ–π –µ –∏–ª–∏ —ë]")
        return

    test_word = message.get_args().strip()

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –º–æ–¥—É–ª—è profanity_filter
    from profanity_filter import generate_yo_variants, contains_profanity

    # –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–ª–æ–≤–∞ —Å –µ/—ë
    variants = generate_yo_variants(test_word)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ—Å—Ç—å
    results = []
    for variant in variants:
        is_profane = contains_profanity(variant)
        status = "‚úÖ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–µ" if is_profane else "‚ùå –æ–±—ã—á–Ω–æ–µ"
        results.append(f"‚Ä¢ {variant} ‚Äî {status}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    response = f"–í–∞—Ä–∏–∞–Ω—Ç—ã —Å–ª–æ–≤–∞ '{test_word}' —Å –∑–∞–º–µ–Ω–æ–π –µ/—ë:\n\n"
    response += "\n".join(results)

    await message.reply(response)

@dp.message_handler(commands=['add_word'])
async def add_bad_word(message: types.Message):
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –≤ —Å–ª–æ–≤–∞—Ä—å –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–π –ª–µ–∫—Å–∏–∫–∏
    """
    if message.from_user.id == message.chat.id:  # –¢–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ
        args = message.get_args()
        if not args:
            await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_word [—Å–ª–æ–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è]")
            return

        word = args.strip().lower()

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        from profanity_filter import BAD_WORDS, CACHE_FILE, generate_yo_variants
        import json

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –∏ –µ–≥–æ –≤–∞—Ä–∏–∞—Ü–∏–∏
        new_words = generate_yo_variants(word)
        words_count_before = len(BAD_WORDS)

        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
        BAD_WORDS.update(new_words)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤ –∫–µ—à
        try:
            with open(CACHE_FILE, 'w', encoding='utf-8') as f:
                json.dump(list(BAD_WORDS), f, ensure_ascii=False, indent=2)

            added_count = len(BAD_WORDS) - words_count_before
            await message.reply(f"–°–ª–æ–≤–æ ¬´{word}¬ª –∏ {added_count-1} –µ–≥–æ –≤–∞—Ä–∏–∞—Ü–∏–π —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–æ–≤–∞—Ä—å.\n"
                               f"–í—Å–µ–≥–æ —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ: {len(BAD_WORDS)}")

        except Exception as e:
            await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
    else:
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)