"""
–≠—Ö–æ-–±–æ—Ç —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–π –ª–µ–∫—Å–∏–∫–∏.
–ü—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–π –ª–µ–∫—Å–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç GIF-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç.
"""

import logging
import os
import random
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ContentType, ParseMode

from profanity_filter import contains_profanity, initialize_bad_words
from gif_service import get_gif_url

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_ID = os.getenv('ADMIN_ID')
ENVIRONMENT = os.getenv('ENVIRONMENT', 'development')

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
if ENVIRONMENT.lower() == 'production':
    DATA_DIR = '/data'
else:
    DATA_DIR = 'data'

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —á–∏—Å–ª–æ, –µ—Å–ª–∏ –æ–Ω –∑–∞–¥–∞–Ω
ADMIN_ID = int(ADMIN_ID) if ADMIN_ID and ADMIN_ID.isdigit() else None

# –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É—é –ª–µ–∫—Å–∏–∫—É
PROFANITY_RESPONSES = [
    "–û–π-–æ–π, –∫–∞–∂–µ—Ç—Å—è, –≤–∞—à —Ä–æ—Ç–∏–∫ –Ω–µ–º–Ω–æ–∂–∫–æ üí© –∑–∞—Å–æ—Ä–∏–ª—Å—è!",
    "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ü–µ–Ω–∑—É—Ä–æ–π. –†–µ–∑—É–ª—å—Ç–∞—Ç: üö´ü§¨‚ÜíüéÅ (–≤–æ—Ç –≤–∞–º –≥–∏—Ñ–∫–∞ –≤–º–µ—Å—Ç–æ –º–∞—Ç–∞).",
    "–ó–∞–º–µ—á–µ–Ω–æ: 99% –º–∞—Ç–∞ ‚Äî —ç—Ç–æ –∫—Ä–∏–∫ –¥—É—à–∏. –í–æ—Ç –≤–∞–º –≥–∏—Ñ–∫–∞ –≤–º–µ—Å—Ç–æ —Ç–µ—Ä–∞–ø–∏–∏.",
    "–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±—ã–ª —Å–ª–∏—à–∫–æ–º üß® spicy üß® –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞. –û—Ö–ª–∞–∂–¥–∞–µ–º.",
    "–í–æ—Ç –≤–∞–º –≥–∏—Ñ–∫–∞, –ø–æ–∫–∞ –≤—ã –≤—Å–ø–æ–º–∏–Ω–∞–µ—Ç–µ, –∫–∞–∫ –≥–æ–≤–æ—Ä–∏—Ç—å –±–µ–∑ –º–∞—Ç–∞. –ö–∞–∫ –≤ –¥–µ—Ç—Å–∞–¥–µ!",
    "–ß–∞—Ç –∑–∞–ø–∏—Å–∞–ª —ç—Ç–æ –≤ \"–¢–µ—Ç—Ä–∞–¥—å –ø–æ–∑–æ—Ä–∞\". –ò—Å–ø—Ä–∞–≤–ª—è–µ–º—Å—è?",
    "\"–°–∫–∞–∑–∞–Ω–æ ‚Äî –Ω–µ –º–∞—Ç–µ—Ä–∏—Ç—å—Å—è!\" (—Å) –ö–∞–ø–∏—Ç–∞–Ω –û—á–µ–≤–∏–¥–Ω–æ—Å—Ç—å."
]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(os.path.join(DATA_DIR, "bot.log"), encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞"""
    return ADMIN_ID and user_id == ADMIN_ID

# –¢–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∫–∏
HELP_TEXT = """
*–ë–æ—Ç-—Ñ–∏–ª—å—Ç—Ä –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–π –ª–µ–∫—Å–∏–∫–∏*

–≠—Ç–æ—Ç –±–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–π –ª–µ–∫—Å–∏–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç GIF-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç.

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
‚Ä¢ `/start` –∏–ª–∏ `/help` ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

*–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*
‚Ä¢ `/update_words` ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã—Ö —Å–ª–æ–≤ –∏–∑ –í–∏–∫–∏—Å–ª–æ–≤–∞—Ä—è
‚Ä¢ `/force_update` ‚Äî –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –∫–µ—à–∞
‚Ä¢ `/add_word [—Å–ª–æ–≤–æ]` ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –≤ —Å–ø–∏—Å–æ–∫
‚Ä¢ `/debug` ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–ø–∏—Å–∫–µ

*–ö–æ–º–∞–Ω–¥—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:*
‚Ä¢ `/test [—Ç–µ–∫—Å—Ç]` ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–π –ª–µ–∫—Å–∏–∫–∏
‚Ä¢ `/test_yo [—Å–ª–æ–≤–æ]` ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–ª–æ–≤–∞ —Å –∑–∞–º–µ–Ω–æ–π –µ/—ë

*–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:* –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞.
"""

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã—Ö —Å–ª–æ–≤
async def on_startup(dp):
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã—Ö —Å–ª–æ–≤...")
    await initialize_bad_words()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start –∏ /help
    """
    await message.reply(HELP_TEXT, parse_mode=ParseMode.MARKDOWN)

@dp.message_handler(commands=['update_words'])
async def update_bad_words(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã—Ö —Å–ª–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
    """
    if not is_admin(message.from_user.id):
        await message.reply("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    await message.reply("–û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã—Ö —Å–ª–æ–≤ –∏–∑ –í–∏–∫–∏—Å–ª–æ–≤–∞—Ä—è...")
    await initialize_bad_words()
    await message.reply("‚úÖ –°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω!")

@dp.message_handler(commands=['force_update'])
async def force_update_words(message: types.Message):
    """
    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –∫–µ—à–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
    """
    if not is_admin(message.from_user.id):
        await message.reply("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    from profanity_filter import CACHE_FILE
    import os

    await message.reply("–ù–∞—á–∏–Ω–∞—é –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞...")

    # –£–¥–∞–ª—è–µ–º –∫–µ—à-—Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if os.path.exists(CACHE_FILE):
        try:
            os.remove(CACHE_FILE)
            await message.reply(f"–ö–µ—à-—Ñ–∞–π–ª {CACHE_FILE} —É–¥–∞–ª–µ–Ω.")
        except Exception as e:
            await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–µ—à-—Ñ–∞–π–ª–∞: {e}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    await initialize_bad_words()

    from profanity_filter import BAD_WORDS
    count = len(BAD_WORDS)
    await message.reply(f"‚úÖ –°–ø–∏—Å–æ–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω! –ó–∞–≥—Ä—É–∂–µ–Ω–æ {count} —Å–ª–æ–≤.")

@dp.message_handler(commands=['debug'])
async def debug_info(message: types.Message):
    """
    –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
    """
    if not is_admin(message.from_user.id):
        await message.reply("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    from profanity_filter import BAD_WORDS
    count = len(BAD_WORDS)
    sample = list(BAD_WORDS)[:10] if count > 10 else list(BAD_WORDS)

    debug_text = f"üìä *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ø–∏—Å–∫–µ:*\n\n" \
                f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: {count}\n" \
                f"‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã —Å–ª–æ–≤: {', '.join(sample)}"

    await message.reply(debug_text, parse_mode=ParseMode.MARKDOWN)

@dp.message_handler(commands=['test'])
async def test_filter(message: types.Message):
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–ª–æ–≤–∞—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
    """
    if not is_admin(message.from_user.id):
        await message.reply("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if not message.get_args():
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/test [—Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏]`", parse_mode=ParseMode.MARKDOWN)
        return

    test_text = message.get_args()
    result = contains_profanity(test_text)

    if result:
        await message.reply(f"‚úÖ –¢–µ–∫—Å—Ç ¬´{test_text}¬ª —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É—é –ª–µ–∫—Å–∏–∫—É")
    else:
        await message.reply(f"‚ùå –¢–µ–∫—Å—Ç ¬´{test_text}¬ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É—é –ª–µ–∫—Å–∏–∫—É")

@dp.message_handler(commands=['test_yo'])
async def test_yo_variations(message: types.Message):
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –Ω–∞ —Å–ª–æ–≤–∞ —Å –±—É–∫–≤–∞–º–∏ –µ/—ë (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
    """
    if not is_admin(message.from_user.id):
        await message.reply("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if not message.get_args():
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/test_yo [—Å–ª–æ–≤–æ —Å –±—É–∫–≤–æ–π –µ –∏–ª–∏ —ë]`", parse_mode=ParseMode.MARKDOWN)
        return

    test_word = message.get_args().strip()

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –º–æ–¥—É–ª—è profanity_filter
    from profanity_filter import generate_yo_variants, contains_profanity

    # –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–ª–æ–≤–∞ —Å –µ/—ë
    variants = generate_yo_variants(test_word)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ—Å—Ç—å
    results = []
    for variant in variants:
        is_profane = contains_profanity(variant)
        status = "‚úÖ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–µ" if is_profane else "‚ùå –æ–±—ã—á–Ω–æ–µ"
        results.append(f"‚Ä¢ `{variant}` ‚Äî {status}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    response = f"üîÑ *–í–∞—Ä–∏–∞–Ω—Ç—ã —Å–ª–æ–≤–∞ '{test_word}' —Å –∑–∞–º–µ–Ω–æ–π –µ/—ë:*\n\n"
    response += "\n".join(results)

    await message.reply(response, parse_mode=ParseMode.MARKDOWN)

@dp.message_handler(commands=['add_word'])
async def add_bad_word(message: types.Message):
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –≤ —Å–ø–∏—Å–æ–∫ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–π –ª–µ–∫—Å–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
    """
    if not is_admin(message.from_user.id):
        await message.reply("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.get_args()
    if not args:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/add_word [—Å–ª–æ–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è]`", parse_mode=ParseMode.MARKDOWN)
        return

    word = args.strip().lower()

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    from profanity_filter import BAD_WORDS, CACHE_FILE, generate_yo_variants
    import json

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –∏ –µ–≥–æ –≤–∞—Ä–∏–∞—Ü–∏–∏
    new_words = generate_yo_variants(word)
    words_count_before = len(BAD_WORDS)

    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
    BAD_WORDS.update(new_words)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ –∫–µ—à
    try:
        with open(CACHE_FILE, 'w', encoding='utf-8') as f:
            json.dump(list(BAD_WORDS), f, ensure_ascii=False, indent=2)

        added_count = len(BAD_WORDS) - words_count_before
        await message.reply(f"‚úÖ –°–ª–æ–≤–æ ¬´{word}¬ª –∏ {added_count-1} –µ–≥–æ –≤–∞—Ä–∏–∞—Ü–∏–π —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫.\n"
                           f"–í—Å–µ–≥–æ —Å–ª–æ–≤ –≤ —Å–ø–∏—Å–∫–µ: {len(BAD_WORDS)}")

    except Exception as e:
        await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")

@dp.message_handler(content_types=ContentType.TEXT)
async def process_message(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    –†–µ–∞–≥–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–π –ª–µ–∫—Å–∏–∫–æ–π
    """
    text = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–π –ª–µ–∫—Å–∏–∫–∏
    logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {text}")
    if contains_profanity(text):
        logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: {text}")

        # –ü–æ–ª—É—á–∞–µ–º URL GIF –∏–∑ API
        gif_url = await get_gif_url()

        if gif_url:
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞
            caption = random.choice(PROFANITY_RESPONSES)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GIF –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–π –ª–µ–∫—Å–∏–∫–æ–π
            await message.reply_animation(
                animation=gif_url,
                caption=caption
            )
        else:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å GIF, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.reply(random.choice(PROFANITY_RESPONSES))
    else:
        logger.debug("–ù–µ—Ü–µ–Ω–∑—É—Ä–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)